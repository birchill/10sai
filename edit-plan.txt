EditCardForm
- On edit post EDIT_CARD with changed fields
- Don't update state directly (get them from props)
- On blur / timeout, if state is dirty, dispatch

reducer/edit
x NEW_CARD -> clears edit card fields, sets formId to some random number
x LOAD_CARD -> update formId (to requested card ID), set state, update card info
x FINISH_LOAD_CARD -> update card info (only if form ID matches)
x FAIL_LOAD_CARD -> update error field, NOT_FOUND
x EDIT_CARD -> update card (changed field only), set dirty fields, state to dirty
x SAVE_CARD -> (nothing to do here?)
x FINISH_SAVE_CARD -> update edit card ID and change state from new_dirty -> ok etc.
  (but only if formIds match)
  update formId
  What if an edit happens in the mean time??? Need to cancel the save task so that it doesn't trigger finish save?
  Need to integration test this case
  Alternatively, just pass the saved card as part of the FINISH_SAVE and compare which fields have changed and drop those that haven't from the dirtyFields -- if dirtyFields is empty update the state 
x FAIL_SAVE_CARD -> update error field (only if formIds match)
SYNC_CARD -> update fields that are not dirty

^ SYNC_CARD needs to check the ID

sagas/card
x NAVIGATE -> dispatch NEW_CARD as needed
x NEW_CARD -> does save if there are dirty fields
x SAVE_CARD -> Actually trigger save
               update URL on success -- either INSERT_HISTORY or replace history
                 depending on if the form IDs match
               dispatch FINISH/FAIL_SAVE_CARD

test/integration/edit
(include reducer)
 -- Do new card through to saving flow
 -- Do load card through to saving flow
 -- Do overlapping save and edit flow
 -- Do test of triggering a new card / load card while dirty

Also:
 -- tidy up edit reducer test to make it shorter/simpler
 -- rename card.js to edit.js
 -- create action creators for other actions
 -- merge dirty states?
 -- create saving state?
    Somehow make it not drop current form unless save completes successfully

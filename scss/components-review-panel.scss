.review-panel {
  overflow-x: hidden;

  > .cards {
    position: relative;
    height: 100%;
    padding: 1em;
    padding-top: 0.5em;
    box-sizing: border-box;

    // This wrapper is needed so that the padding from 'cards' is respected by
    // the absolutely-positioned descendants.
    > .cardwrapper {
      position: relative;
      height: 100%;

      > .review-card {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        position: absolute;
        left: 0;
        top: 0;
        transition: transform 0.2s;
      }
      > .previous {
        transform: translate(calc(-100% - 2em));
      }
      > .next {
        transform: translate(calc(100% + 2em));
      }
    }

    > .divider {
      width: 70%;
      margin-top: 1rem;
      margin-bottom: 1rem;
    }

    > .notes {
      width: 80%;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 1rem;
    }
  }

  > .answer-buttons {
    transition: opacity 0.2s;

    &[hidden] {
      // Override UA style
      display: block;

      opacity: 0;
      pointer-events: none;
    }

    > .fail,
    > .pass {
      position: fixed;

      --hit-region-width: 8rem;
      --hit-region-height: 9rem;
      --buttonface-diameter: 7rem;

      @media screen and (max-width: 600px) {
        --hit-region-width: 7rem;
        --hit-region-height: 8rem;
        --buttonface-diameter: 6rem;
      }

      width: var(--hit-region-width);
      max-width: 33%;
      height: var(--hit-region-height);

      top: calc(100% - var(--hit-region-height));

      border: none;
      border-radius: 0px;
      opacity: 0.75;
      padding: 0;

      text-align: center;

      > .buttonface {
        display: inline-block;
        width: calc(2 * var(--buttonface-diameter));
        height: calc(2 * var(--buttonface-diameter));
        border-radius: var(--buttonface-diameter);
        color: white;
        font-weight: bold;
        font-size: 1rem;
        transition: transform 0.15s;

        margin-top: calc(var(--hit-region-height) - var(--buttonface-diameter));

        > .icon {
          width: calc(var(--buttonface-diameter) / 2.5);
          height: calc(var(--buttonface-diameter) / 2.5);
          margin-top: calc(var(--buttonface-diameter) / 3);
        }
      }

      &:active {
        transform: translateY(2px);
      }
    }
    > .fail {
      left: 0;

      > .buttonface {
        transform: translateX(calc(-1 * var(--buttonface-diameter)));
        background: $fail-red;

        > .icon {
          margin-left: calc(var(--buttonface-diameter) * 0.7);
        }
      }
      &:focus > .buttonface,
      &:hover > .buttonface {
        transform: translateX(calc(-1 * var(--buttonface-diameter))) scale(1.2);
      }
    }
    > .pass {
      right: 0;

      > .buttonface {
        transform: translateX(
          calc(var(--hit-region-width) - var(--buttonface-diameter))
        );
        background: $pass-green;

        > svg {
          margin-left: calc(var(--buttonface-diameter) * -0.7);
        }
      }
      &:focus > .buttonface,
      &:hover > .buttonface {
        transform: translateX(
            calc(var(--hit-region-width) - var(--buttonface-diameter))
          )
          scale(1.2);
      }
    }
  }
}

.speech-bubble {
  display: flex;
  position: fixed;
  z-index: 9999;
  background: transparent;

  transition: opacity .1s;
  will-change: opacity;
  pointer-events: none;

  &[hidden] {
    opacity: 0;
    &:not(.-fadeout) {
      // We'd like to use display:none here but then when we go to re-show the
      // content we won't have dimensions available for positioning it.
      visibility: hidden;
    }
  }
  &.-fadein {
    opacity: 0;
  }

  > .panel {
    pointer-events: all;
    padding: 6px 0;
    color: $text-color;
    margin: 4px;
    max-width: 320px;
    flex-grow: 1;
  }

  > .panel, > .arrow::before {
    background: hsla(0,0%,99%,.975);
    border: 1px solid rgb(190, 190, 190);
    border-radius: 10px;
    box-shadow: 0 0 4px hsla(210,4%,10%,.2);
  }

  > .arrow {
    position: relative;
    overflow: hidden;
    flex-shrink: 0;

    // Desired width of the arrow
    --arrow-width: 20px;

    //
    // Amount of room to allow for the shadow. Should be about half the radius.
    //
    --shadow-radius: 4px;
    --shadow-margin: calc(var(--shadow-radius) / 2);

    //
    // Crop the arrow region to show half the arrow plus allow room for margins.
    //
    width: calc(var(--arrow-width) + 2 * var(--shadow-margin));
    height: calc(var(--arrow-width) / 2 + var(--shadow-margin));

    //
    // Minimum space to allow between the arrow and the end of the panel.
    // This value is not used in this stylesheet but is read from computed
    // style.
    //
    --arrow-margin: 18px;

    &::before {
      content: "";
      position: absolute;

      // Make sure the border is included in the size.
      box-sizing: border-box;

      // Don't inherit any rounded corners.
      border-radius: 0;

      //
      // When the box is rotated, it should have width <arrow-width>.
      // That makes the length of one side of the box equal to:
      //
      //    (<arrow-width> / 2) / sin 45
      //
      --sin-45: 0.707106781;
      --square-side: calc(var(--arrow-width) / 2 / var(--sin-45));
      width: var(--square-side);
      height: var(--square-side);

      //
      // The rotated square will overshoot the left side
      // and need to be shifted in by:
      //
      //   (<arrow-width> - square side) / 2
      //
      // But we also want to shift it in so that the box-shadow
      // is not clipped when we clip the parent so we add
      // a suitable margin for that.
      //
      --overhang: calc((var(--arrow-width) - var(--square-side)) / 2);
      margin-left: calc(var(--overhang) + var(--shadow-margin));
    }
  }

  &.-top {
    flex-direction: column;

    > .panel {
      //
      // Drop the margin between the doorhanger and the arrow.
      //
      margin-bottom: 0;
    }

    > .arrow {
      // Overlap the arrow with the 1px border of the doorhanger
      margin-top: -1px;

      &::before {
        transform: rotate(45deg);

        // Show only the bottom half of the box
        margin-top: calc(var(--square-side) / -2);
      }
    }
  }

  &.-bottom {
    flex-direction: column-reverse;

    > .panel {
      //
      // Drop the margin between the doorhanger and the arrow.
      //
      margin-top: 0;
    }

    > .arrow {
      // Overlap the arrow with the 1px border of the doorhanger
      margin-bottom: -1px;

      &::before {
        transform: rotate(225deg);

        // Shift the rotated box in so that it is not clipped
        margin-top: calc(var(--overhang) + var(--shadow-margin));
      }
    }
  }
}

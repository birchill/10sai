@import "~normalize-css/normalize";
@import "~draft-js/dist/Draft";

$highlight: #2690BA;
$hover-highlight: lighten(#2690BA, 15%);
$border-width: 0.1rem;

$text-color: #333;
$really-light-grey: #f2f2f2;
$light-grey: #dbdbdb;
$dark-grey: #c5c5c5;

$keyword-yellow: lemonchiffon;
$keyword-yellow-dark: darken($keyword-yellow, 50%);

/*
 * Font settings
 */

body, html {
  font-family: Arial, sans-serif;
  -webkit-text-size-adjust: 100%;
  box-sizing: border-box;
  font-size: 18px;
  line-height: 1.4;
  color: $text-color;
}

@media screen and (max-width: 600px) {
  body, html {
    font-size: 16px;
  }
}
@media screen and (max-width: 450px) {
  body, html {
    font-size: 14px;
  }
}

/*
 * Screen layout
 *
 * Based on prototype here: http://codepen.io/anon/pen/EKGjGG
 */

body, html {
  padding: 0;
  margin: 0;
  height: 100%;
  overflow: hidden;
}
#container {
  height: 100%;
}
#container > div {
  display: flex;
  height: 100%;
  flex-direction: column;
}
main {
  position: relative;
  flex: 1;
}
main .content-screen {
  margin-top: 10px;
  height: calc(100% - 10px);
  width: 100%;
  position: absolute;
  overflow: auto;
}

/*
 * Popup background
 */

main section, main div.popup-overlay {
  height: 100%;
  width: 100%;
  position: absolute;
}
main div.popup-overlay {
  background: rgb(220, 220, 220);
  transition: opacity 0.15s;
  opacity: 0;
  will-change: opacity;
  pointer-events: none;
}
main div.popup-overlay.active {
  opacity: 0.8;
  pointer-events: all;
}

@import 'Navbar';
@import 'ControlOverlay';
@import 'EditCardScreen';
@import 'CardFaceInput';
@import 'components-tab-block';

/*
 * Section pages
 */

body {
  background: $really-light-grey;
}
main section {
  box-sizing: border-box;
  padding: 10px;
  background: $really-light-grey;
}
main section {
  transition: all 0.2s;
}

/*
 * Popups
 */

main section.popup {
  background: white;
  margin-left: 0.5rem;
  margin-right: 0.5rem;
  margin-top: 0.5rem;
  width: calc(100vw - 1rem);
  height: auto;
  /*
   * Without this max-height, we won't get scrollbars when the screen is too
   * small to fit the whole panel (e.g. when the onscreen keyboard is in use)
   */
  max-height: calc(100% - 1rem);
  padding: 1rem;
  box-shadow: 0 0 6px grey;
  overflow: auto;
}
main section.popup[aria-hidden=true] {
  transform: translate(0%, -120%);
  transform: translate(0%, calc(-100% - 80px));
  transition: transform 0.15s ease-in;
  will-change: transform;
}
main section.popup {
  transform: translate(0%);
  transition-timing-function: ease;
}
main section.popup .close-button {
  position: absolute;
  right: 0;
  top: 0;
  padding: 1rem;
}

main section h3 {
  margin-top: 0;
  font-size: 1.3rem;
}

/*
 * Summary panel
 */

.summary-panel {
  background: #f8f8f8;
  border-radius: .4rem;
  padding: 2rem .5rem;
  text-align: center;
}
.summary-panel h4 {
  font-size: 1.2rem;
  margin: 0.5rem 0 1rem;
}
.summary-panel p,
.summary-panel ul {
  color: #888;
}
.summary-panel .action {
  margin-top: 1.5rem;
}
.summary-panel p + ul {
  margin-top: -0.5em;
}
.summary-panel ul {
  text-align: left;
  display: inline-block;
}
.summary-panel .icon {
  display: block;
  margin-left: auto;
  margin-right: auto;
  height: 5rem;
  width: 5rem;
}
.summary-panel fieldset {
  text-align: left;
}
/* Vertically align content */
.summary-panel {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

//
// Close button
//

.close-button {
  font-size: 0;
}
.close-button::before {
  content: "";
  width: 1.2rem;
  height: 1.2rem;
  display: inline-block;
  background: url('img/icons.svg#cross') 0 / 100% 100% content-box;
}

//
// Forms
//

@import 'form-base';
@import 'form-textbox';
@import 'form-buttons';

@import 'components-stacked-group';

.input-group {
  display: inline-block;
}
.input-group .form-input:first-child:not(:last-child),
.input-group .input-group-btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right: none;
}
.input-group .form-input:not(:first-child):not(:last-child),
.input-group .input-group-btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  margin-left: -.2rem;
}
.input-group .form-input:last-child:not(:first-child),
.input-group .input-group-btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  margin-left: -.2rem;
}
fieldset {
  border: 1px solid #bbb;
  border-radius: 0.5rem;
  margin: 0 2px;
  margin-top: 1rem;
  padding: 1.2rem 1.8rem;
}

/*
 * Error panel
 */
.error-panel {
  margin: 0rem 0.5rem;
  padding-bottom: 1rem;
  display: table;
  margin-left: auto;
  margin-right: auto;
}
.error-details {
  margin-bottom: 1.2rem;
  margin-left: 1rem;
  margin-right: 1rem;
}

//
// Cancelable text box
//
.cancelable-textbox-group {
  display: inline-block;
}
.cancelable-textbox-cancel {
  width: 2em;
  margin: 0;
  margin-left: -2em;
  padding-left: 0;
  padding-right: 0;
  border: 0;
  transition: transform 0.3s;
}
.cancelable-textbox-cancel[aria-hidden=true] {
  transform: scale(0);
}
.cancelable-textbox-cancel span {
  position: absolute;
  left: -10000px;
}
.cancelable-textbox-cancel::after {
  color: lightgrey;
  content: "X";
  font-weight: bold;
}
.cancelable-textbox-cancel:hover::after {
  color: grey;
}
.cancelable-textbox-group input[type="text"]::-ms-clear,
.cancelable-textbox-group input[type="search"]::-ms-clear {
  display: none;
}

/*
 * Generic settings panel
 */
.settings-panel {
  display: flex;
  flex-direction: column;
  /*
   * We do this just to make sure the panel doesn't keep resizing when the
   * contents change. We could just to 'height: 100%' but there's too much
   * empty space on desktop computers in that case. 31rem happens to fit most
   * of the content we currently stick in these panels (and fit in a 320x480
   * screen).
   */
  min-height: 31rem;
}
.settings-panel > :not(h3) {
  flex: 1;
}

/*
 * Sync settings panel
 */
.sync-settings .sync-icon {
  background: url('img/icons.svg#sync-full') 0% / 100% 100% content-box;
}
.sync-settings.in-progress .sync-icon {
  animation: rotate 1s linear infinite;
}
.sync-settings.paused .sync-icon {
  background-image: url('img/icons.svg#sync-pause');
}
.sync-settings.offline .sync-icon {
  background-image: url('img/icons.svg#sync-offline');
}
.sync-settings.error .sync-icon {
  background-image: url('img/icons.svg#sync-error');
}
.sync-settings.not-configured .sync-icon {
  background-image: url('img/icons.svg#sync-hollow');
}
.sync-settings.in-progress progress {
  margin-top: 1rem;
  margin-bottom: 1.2rem;
}
fieldset[name=sync-server] {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  padding: 0 0.5rem 1rem;
  & > * {
    margin: 0.5rem;
  }
  & .server-summary {
    flex: 1;
  }
  & .server-name {
    font-weight: bold;
    white-space: nowrap;
  }
  & button {
    flex: 0;
  }
}
form[name=sync-server-settings] {
  display: inline-block;
  text-align: center;
  position: relative;
  max-width: 100%;
  & > * {
    display: block;
    margin-top: 0.4rem;
  }
  & > *, & input {
    margin-left: 0;
    margin-right: 0;
    width: 25rem;
    max-width: 100%;
  }
  & input.primary {
    margin-top: 0.8rem;
  }
  input[name=username],
  input[name=password] {
    background-position: 0.9rem;
    /* We want to use 'background-size: auto 45%' here but Chrome seems to
     * have trouble with 'auto' values. */
    background-size: 1.3rem 1.3rem;
    background-repeat: no-repeat;
    padding-left: 2.8rem;
  }
  input[name=username] {
    background-image: url('img/icons.svg#user');
  }
  input[name=password] {
    background-image: url('img/icons.svg#lock');
  }
}

/*
 * Card grid
 */
.card-grid {
  position: relative;
}
.card-grid > * {
  position: absolute;
}
.grid-item {
  transform-origin: 0% 0%;
}

/* Item animations */
.grid-item.moving {
  transition: transform 0.15s 0.2s ease-in;
}
.grid-item.moving.changed-row {
  transition-duration: 0.25s;
  transition-timing-function: ease;
}

.grid-item .scale-wrapper {
  transition-property: transform;
  transition-delay: inherit;
  /* Reveal transition */
  transition-duration: 0.4s;
  transition-timing-function: cubic-bezier(.85,0.1,.45,1.7);
}
.grid-item.adding .scale-wrapper,
.grid-item.deleting .scale-wrapper {
  will-change: transform;
  transform: scale(0);
}

.grid-item.deleting {
  pointer-events: none;
}
.grid-item.deleting .scale-wrapper {
  transition: transform 0.3s cubic-bezier(0,-0.5,1,-0.5);
}

.card-preview {
  display: inline-block;
  position: relative;
  background: white;
  border-radius: .2rem;
  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.15);
  margin: .6rem;
  height: 8rem;
  width: 8rem;
  text-align: center;
  overflow: hidden;
  color: black;
}
.card-preview .flex-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  padding: .4rem;
  overflow: hidden;
}
.card-preview button.delete {
  position: absolute;
  right: 0;
  top: 0;
  padding: .6rem;
  font-size: 0;
  height: auto;
  margin: 0;
  &::before {
    content: "";
    width: .8rem;
    height: .8rem;
    display: inline-block;
    background: url("img/icons.svg#cross") 0 / 0.8rem 0.8rem content-box;
  }
}
// Hover states
.card-preview {
  transition: transform 0.2s;
  box-sizing: border-box;
}
.card-preview:hover {
  border: $border-width solid $hover-highlight;
  transform: scale(1.07);
}
